//TalentoHumano: Zambrano Ivania - Tutotia BD 4 "E"

using System;
using System.Data;
using System.Data.SqlClient;
using System.Reflection.Metadata;
using iText.Kernel.Pdf;
using iText.Layout;
using Document = iText.Layout.Document; // Alias para el espacio de nombres iText.Layout.Document

using iText.Layout.Element;
using System.Text;


namespace CRUDUsuariosRoles
{
    class Program
    {
        static string connectionString = "Server=IvaniaZambrano\\SQLEXPRESS;Database=TalentoHumano;Integrated Security=True;";

        static void Main(string[] args)
        {
            while (true)
            {
                Console.WriteLine("");
                Console.WriteLine("Seleccione una opción:");
                Console.WriteLine("1. Crear Usuario");
                Console.WriteLine("2. Modificar Usuario");
                Console.WriteLine("3. Eliminar Usuario");
                Console.WriteLine("4. Crear Rol");
                Console.WriteLine("5. Asignar Rol a Usuario");
                Console.WriteLine("6. Consultar Roles");
                Console.WriteLine("7. Consultar Usuarios");
                Console.WriteLine("8. Realizar respaldo de la base de datos");
                Console.WriteLine("9. Restaurar base de datos");
                Console.WriteLine("10.Listar las entidades");
                Console.WriteLine("11.Listar atributos por entidades");
                Console.WriteLine("12.Agregar entidades con atributos");
                Console.WriteLine("13.Generar reporte en PDF");
                Console.WriteLine("14. Salir");
                Console.WriteLine("15. Procedimientos almacenados");


                Console.WriteLine("");
                Console.Write("Ingrese la opción seleccionada: ");

                int opcion;
                if (!int.TryParse(Console.ReadLine(), out opcion))
                {
                    Console.WriteLine("Opción no válida. Por favor, ingrese un número del 1 al 8.");
                    continue;
                }

                switch (opcion)
                {
                    case 1:
                        CrearLoginYUsuario();
                        break;
                    case 2:
                        ModificarUsuario();
                        break;
                    case 3:
                        EliminarUsuario();
                        break;
                    case 4:
                        CrearRol();
                        break;
                    case 5:
                        AsignarRolUsuario();
                        break;
                    case 6:
                        ConsultarRoles();
                        break;
                    case 7:
                        ConsultarUsuarios();
                        break;
                    case 8:
                        RealizarRespaldo();
                        break;
                    case 9:
                        RestaurarBaseDeDatos();
                        break;
                    case 10:
                        ListarEntidadesBaseDatos();
                        break;
                    case 11:
                        ListarAtributosEntidad();
                        break;
                    case 12:
                        AgregarEntidadConAtributos();
                        break;
                    case 13:
                        GenerarInformePDF();
                        break;
                    case 14:
                        return;
                    case 15:
                        GenerarProcedimientosAlmacenados();
                        return;
                    default:
                        Console.WriteLine("Opción no válida. Por favor, ingrese un número del 1 al 8.");
                        break;
                }
            }
        }


        static void CrearLoginYUsuario()
        {
            Console.Write("Ingrese el nombre del nuevo login: ");
            string nombreLogin = Console.ReadLine();

            Console.Write("Ingrese la contraseña del nuevo login: ");
            string contraseñaLogin = Console.ReadLine();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // Verificar si el login ya existe
                string verificarLoginQuery = $"SELECT name FROM sys.server_principals WHERE type_desc IN ('SQL_LOGIN', 'WINDOWS_LOGIN') AND name = @nombreLogin";
                using (SqlCommand verificarLoginCmd = new SqlCommand(verificarLoginQuery, connection))
                {
                    verificarLoginCmd.Parameters.AddWithValue("@nombreLogin", nombreLogin);
                    object resultado = verificarLoginCmd.ExecuteScalar();
                    if (resultado != null)
                    {
                        Console.WriteLine($"El login '{nombreLogin}' ya existe en el servidor.");
                        return;
                    }
                }

                // Crear el login
                string createLoginQuery = $"CREATE LOGIN [{nombreLogin}] WITH PASSWORD = '{contraseñaLogin}'";
                using (SqlCommand createLoginCommand = new SqlCommand(createLoginQuery, connection))
                {
                    try
                    {
                        createLoginCommand.ExecuteNonQuery();
                        Console.WriteLine($"Login '{nombreLogin}' creado correctamente.");
                        Console.WriteLine("");
                    }
                    catch (SqlException ex)
                    {
                        Console.WriteLine($"Error al crear el login: {ex.Message}");
                        return;
                    }
                }

                // Crear el usuario asociado al login en una base de datos específica
                Console.Write("Ingrese el nombre de la base de datos para crear el usuario: ");
                string nombreBaseDeDatos = Console.ReadLine();

                // Verificar si la base de datos existe
                string verificarBaseDeDatosQuery = $"SELECT name FROM sys.databases WHERE name = @nombreBaseDeDatos";
                using (SqlCommand verificarBaseDeDatosCmd = new SqlCommand(verificarBaseDeDatosQuery, connection))
                {
                    verificarBaseDeDatosCmd.Parameters.AddWithValue("@nombreBaseDeDatos", nombreBaseDeDatos);
                    object resultado = verificarBaseDeDatosCmd.ExecuteScalar();
                    if (resultado == null)
                    {
                        Console.WriteLine($"La base de datos '{nombreBaseDeDatos}' no existe en el servidor.");
                        return;
                    }
                }

                // Crear el usuario
                string createUsuarioQuery = $"USE {nombreBaseDeDatos}; CREATE USER [{nombreLogin}] FOR LOGIN [{nombreLogin}]";
                using (SqlCommand createUsuarioCommand = new SqlCommand(createUsuarioQuery, connection))
                {
                    try
                    {
                        createUsuarioCommand.ExecuteNonQuery();
                        Console.WriteLine($"Usuario '{nombreLogin}' creado correctamente en la base de datos '{nombreBaseDeDatos}'.");
                        Console.WriteLine(" ");
                    }
                    catch (SqlException ex)
                    {
                        Console.WriteLine($"Error al crear el usuario: {ex.Message}");
                        return;
                    }
                }
            }
        }



        static void ModificarUsuario()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // Obtener la lista de usuarios disponibles en la base de datos
                Dictionary<int, string> usuarios = new Dictionary<int, string>();
                string obtenerUsuariosQuery = "SELECT principal_id, name FROM sys.database_principals WHERE type_desc = 'SQL_USER'";
                using (SqlCommand obtenerUsuariosCmd = new SqlCommand(obtenerUsuariosQuery, connection))
                {
                    using (SqlDataReader reader = obtenerUsuariosCmd.ExecuteReader())
                    {
                        int index = 1;
                        while (reader.Read())
                        {
                            int principalId = reader.GetInt32(0);
                            string nombreUser = reader.GetString(1);
                            usuarios.Add(index, nombreUser);
                            Console.WriteLine($"{index}. {nombreUser}");
                            index++;
                        }
                    }
                }

                // Solicitar al usuario que seleccione el número del usuario a modificar
                Console.Write("\nIngrese el número del usuario a modificar: ");
                if (!int.TryParse(Console.ReadLine(), out int seleccion))
                {
                    Console.WriteLine("Entrada no válida. Debe ingresar un número.");
                    return;
                }

                // Verificar si el número de usuario seleccionado existe
                if (!usuarios.ContainsKey(seleccion))
                {
                    Console.WriteLine("Número de usuario no válido.");
                    return;
                }

                string nombreUsuario = usuarios[seleccion];

                // Solicitar al usuario que ingrese el nuevo nombre para el usuario seleccionado
                Console.Write("Ingrese el nuevo nombre para el usuario: ");
                string nuevoNombreUsuario = Console.ReadLine();

                // Modificar el nombre del usuario
                string query = $"ALTER USER [{nombreUsuario}] WITH NAME = [{nuevoNombreUsuario}]";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    try
                    {
                        command.ExecuteNonQuery();
                        Console.WriteLine($"Usuario '{nombreUsuario}' modificado correctamente. Nuevo nombre: '{nuevoNombreUsuario}'");
                    }
                    catch (SqlException ex)
                    {
                        Console.WriteLine($"Error al modificar el usuario: {ex.Message}");
                    }
                }
            }
        }

        static void EliminarUsuario()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // Obtener la lista de usuarios disponibles en la base de datos
                Dictionary<int, string> usuarios = new Dictionary<int, string>();
                string obtenerUsuariosQuery = "SELECT principal_id, name FROM sys.database_principals WHERE type_desc = 'SQL_USER'";
                using (SqlCommand obtenerUsuariosCmd = new SqlCommand(obtenerUsuariosQuery, connection))
                {
                    using (SqlDataReader reader = obtenerUsuariosCmd.ExecuteReader())
                    {
                        int index = 1;
                        while (reader.Read())
                        {
                            int principalId = reader.GetInt32(0);
                            string nombreUser = reader.GetString(1);
                            usuarios.Add(index, nombreUser);
                            Console.WriteLine($"{index}. {nombreUser}");
                            index++;
                        }
                    }
                }

                // Solicitar al usuario que seleccione el número del usuario a eliminar
                Console.Write("\nIngrese el número del usuario a eliminar: ");
                if (!int.TryParse(Console.ReadLine(), out int seleccion))
                {
                    Console.WriteLine("Entrada no válida. Debe ingresar un número.");
                    return;
                }

                // Verificar si el número de usuario seleccionado existe
                if (!usuarios.ContainsKey(seleccion))
                {
                    Console.WriteLine("Número de usuario no válido.");
                    return;
                }

                string nombreUsuario = usuarios[seleccion];

                // Eliminar el usuario
                string eliminarUsuarioQuery = $"DROP USER [{nombreUsuario}]";
                using (SqlCommand eliminarUsuarioCmd = new SqlCommand(eliminarUsuarioQuery, connection))
                {
                    try
                    {
                        eliminarUsuarioCmd.ExecuteNonQuery();
                        Console.WriteLine($"Usuario '{nombreUsuario}' eliminado correctamente.");
                    }
                    catch (SqlException ex)
                    {
                        Console.WriteLine($"Error al eliminar el usuario: {ex.Message}");
                    }
                }
            }
        }

        static void CrearRol()
        {
            Console.Write("Ingrese el nombre del nuevo rol: ");
            string nombreRol = Console.ReadLine();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = $"CREATE ROLE [{nombreRol}]";
                SqlCommand command = new SqlCommand(query, connection);

                try
                {
                    command.ExecuteNonQuery();
                    Console.WriteLine($"Rol '{nombreRol}' creado correctamente.");
                    Console.WriteLine(" ");

                }
                catch (SqlException ex)
                {
                    Console.WriteLine($"Error al crear el rol: {ex.Message}");
                }
            }
        }

        static void AsignarRolUsuario()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // Obtener la lista de usuarios disponibles en la base de datos
                Dictionary<int, string> usuarios = new Dictionary<int, string>();
                string obtenerUsuariosQuery = "SELECT principal_id, name FROM sys.database_principals WHERE type_desc = 'SQL_USER'";
                using (SqlCommand obtenerUsuariosCmd = new SqlCommand(obtenerUsuariosQuery, connection))
                {
                    using (SqlDataReader reader = obtenerUsuariosCmd.ExecuteReader())
                    {
                        int index = 1;
                        Console.WriteLine("Usuarios disponibles:");
                        while (reader.Read())
                        {
                            int principalId = reader.GetInt32(0);
                            string nombreUser = reader.GetString(1);
                            usuarios.Add(index, nombreUser);
                            Console.WriteLine($"{index}. {nombreUser}");
                            index++;
                        }
                    }
                }

                // Solicitar al usuario que seleccione el número del usuario
                Console.Write("\nIngrese el número del usuario: ");
                if (!int.TryParse(Console.ReadLine(), out int seleccionUsuario))
                {
                    Console.WriteLine("Entrada no válida. Debe ingresar un número.");
                    return;
                }

                // Verificar si el número de usuario seleccionado existe
                if (!usuarios.ContainsKey(seleccionUsuario))
                {
                    Console.WriteLine("Número de usuario no válido.");
                    return;
                }

                string nombreUsuario = usuarios[seleccionUsuario];

                // Obtener la lista de roles disponibles en la base de datos
                Dictionary<int, string> roles = new Dictionary<int, string>();
                string obtenerRolesQuery = "SELECT name FROM sys.database_principals WHERE type_desc = 'DATABASE_ROLE'";
                using (SqlCommand obtenerRolesCmd = new SqlCommand(obtenerRolesQuery, connection))
                {
                    using (SqlDataReader reader = obtenerRolesCmd.ExecuteReader())
                    {
                        int index = 1;
                        Console.WriteLine("\nRoles disponibles:");
                        while (reader.Read())
                        {
                            string nameRol = reader.GetString(0);
                            roles.Add(index, nameRol);
                            Console.WriteLine($"{index}. {nameRol}");
                            index++;
                        }
                    }
                }

                // Solicitar al usuario que seleccione el número del rol
                Console.Write("\nIngrese el número del rol: ");
                if (!int.TryParse(Console.ReadLine(), out int seleccionRol))
                {
                    Console.WriteLine("Entrada no válida. Debe ingresar un número.");
                    return;
                }

                // Verificar si el número de rol seleccionado existe
                if (!roles.ContainsKey(seleccionRol))
                {
                    Console.WriteLine("Número de rol no válido.");
                    return;
                }

                string nombreRol = roles[seleccionRol];

                // Asignar el rol al usuario
                string query = $"ALTER ROLE [{nombreRol}] ADD MEMBER [{nombreUsuario}]";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    try
                    {
                        command.ExecuteNonQuery();
                        Console.WriteLine($"Rol '{nombreRol}' asignado al usuario '{nombreUsuario}' correctamente.");
                    }
                    catch (SqlException ex)
                    {
                        Console.WriteLine($"Error al asignar el rol al usuario: {ex.Message}");
                    }
                }
            }
        }


        static void ConsultarRoles()
        {
            Console.WriteLine("Roles en la base de datos:");
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT name FROM sys.database_principals WHERE type_desc = 'DATABASE_ROLE'";
                SqlCommand command = new SqlCommand(query, connection);

                SqlDataReader reader = command.ExecuteReader();
                Console.WriteLine("");
                while (reader.Read())
                {

                    Console.WriteLine(reader["name"]);


                }
                reader.Close();
            }
        }

        static void ConsultarUsuarios()
        {
            Console.WriteLine("Usuarios en la base de datos:");
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT name FROM sys.database_principals WHERE type_desc = 'SQL_USER'";
                SqlCommand command = new SqlCommand(query, connection);

                SqlDataReader reader = command.ExecuteReader();
                Console.WriteLine("");
                while (reader.Read())
                {
                    Console.WriteLine(reader["name"]);

                }
                reader.Close();
            }
        }


        static void RealizarRespaldo()
        {
            try
            {
                Console.Write("Ingrese el nombre de la base de datos a respaldar: ");
                string databaseName = Console.ReadLine();
                Console.Write("Ingrese el nombre del archivo de respaldo (.bak): ");
                string fileName = Console.ReadLine();
                string backupFolderPath = @"C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\Backup";
                string backupFileName = Path.Combine(backupFolderPath, fileName);

                if (File.Exists(backupFileName))
                {
                    Console.WriteLine("El archivo de respaldo ya existe en la ubicación especificada.");
                    return;
                }

                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    // Comando SQL para realizar el respaldo
                    string query = $"BACKUP DATABASE [{databaseName}] TO DISK = '{backupFileName}'";
                    SqlCommand command = new SqlCommand(query, connection);
                    command.ExecuteNonQuery();

                    Console.WriteLine($"Respaldo de la base de datos '{databaseName}' creado correctamente en '{backupFileName}'.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al realizar el respaldo: {ex.Message}");
            }
        }

        static void RestaurarBaseDeDatos()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                try
                {
                    // Mostrar los archivos de respaldo disponibles
                    string backupPath = @"C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\Backup";
                    string[] backupFiles = Directory.GetFiles(backupPath, "*.bak");

                    if (backupFiles.Length > 0)
                    {
                        Console.WriteLine("Seleccione el archivo de respaldo a restaurar:");
                        for (int i = 0; i < backupFiles.Length; i++)
                        {
                            Console.WriteLine($"{i + 1}. {Path.GetFileName(backupFiles[i])}");
                        }

                        Console.Write("Ingrese el número correspondiente: ");
                        int selectedIndex;
                        if (int.TryParse(Console.ReadLine(), out selectedIndex) && selectedIndex >= 1 && selectedIndex <= backupFiles.Length)
                        {
                            string backupFilePath = backupFiles[selectedIndex - 1];
                            string backupFileName = Path.GetFileName(backupFilePath);

                            // Restaurar la base de datos desde el archivo de respaldo seleccionado
                            string databaseName = Path.GetFileNameWithoutExtension(backupFileName).Split('_')[0];
                            string newDataPath = @"C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\";
                            string newLogPath = @"C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\";

                            string query = $"RESTORE DATABASE [{databaseName}] FROM DISK = '{backupFilePath}' " +
                                           $"WITH MOVE 'TalentoHumano' TO '{newDataPath}{databaseName}.mdf', " +
                                           $"MOVE 'TalentoHumano_log' TO '{newLogPath}{databaseName}_log.ldf', " +
                                           $"REPLACE";

                            SqlCommand command = new SqlCommand(query, connection);
                            command.ExecuteNonQuery();

                            Console.WriteLine($"Se restauró la base de datos '{databaseName}' desde el archivo '{backupFileName}'");

                            // Obtener información adicional de la base de datos restaurada
                        }
                        else
                        {
                            Console.WriteLine("Selección inválida.");
                        }
                    }
                    else
                    {
                        Console.WriteLine("No hay archivos de respaldo disponibles.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al restaurar la base de datos: {ex.Message}");
                }
            }
        }


        static void ListarEntidadesBaseDatos()
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    // Consulta SQL para obtener la lista de entidades de la base de datos
                    string query = "SELECT name FROM sys.objects WHERE type IN ('U', 'V', 'P', 'FN', 'TF', 'IF') ORDER BY name";

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            Console.WriteLine("Lista de entidades en la base de datos:");

                            // Iterar sobre los resultados y mostrar el nombre de cada entidad
                            while (reader.Read())
                            {
                                string entityName = reader.GetString(0);
                                Console.WriteLine("- " + entityName);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error al listar las entidades: " + ex.Message);
            }
        }

        static void ListarAtributosEntidad()
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    // Consulta SQL para obtener la lista de entidades de la base de datos
                    string query = "SELECT object_id, name FROM sys.objects WHERE type IN ('U', 'V', 'P', 'FN', 'TF', 'IF') ORDER BY name";

                    Dictionary<int, string> entityDictionary = new Dictionary<int, string>();

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            Console.WriteLine("Lista de entidades en la base de datos:");

                            // Iterar sobre los resultados y mostrar el nombre de cada entidad con un ID asignado
                            int entityId = 1;
                            while (reader.Read())
                            {
                                string entityName = reader.GetString(1);
                                Console.WriteLine($"{entityId}. {entityName}");
                                entityDictionary.Add(entityId, entityName);
                                entityId++;
                            }
                        }
                    }

                    Console.Write("Seleccione el número de la entidad para ver sus atributos (o 0 para salir): ");
                    if (int.TryParse(Console.ReadLine(), out int selectedEntityId) && entityDictionary.ContainsKey(selectedEntityId))
                    {
                        string selectedEntity = entityDictionary[selectedEntityId];
                        MostrarAtributosEntidad(connection, selectedEntity);
                    }
                    else
                    {
                        Console.WriteLine("Selección no válida o no seleccionada. Saliendo del programa.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error al listar los atributos de las entidades: " + ex.Message);
            }
        }

        static void MostrarAtributosEntidad(SqlConnection connection, string entityName)
        {
            try
            {
                // Consulta SQL para obtener los atributos de la entidad seleccionada
                string query = "SELECT name FROM sys.columns WHERE object_id = OBJECT_ID(@entityName)";

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@entityName", entityName);

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        Console.WriteLine("Atributos de la entidad " + entityName + ":");

                        // Iterar sobre los resultados y mostrar el nombre de cada atributo
                        while (reader.Read())
                        {
                            string attributeName = reader.GetString(0);
                            Console.WriteLine("- " + attributeName);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error al listar los atributos de la entidad " + entityName + ": " + ex.Message);
            }
        }
        static void AgregarEntidadConAtributos()
        {
            Console.Write("Ingrese el nombre de la entidad: ");
            string nombreEntidad = Console.ReadLine();

            Console.WriteLine("Ingrese los atributos de la entidad (separados por coma): ");
            string atributosInput = Console.ReadLine();
            string[] atributos = atributosInput.Split(',');

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();

                    // Verificar si la entidad ya existe en la base de datos
                    string verificarEntidadQuery = $"SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @nombreEntidad";
                    using (SqlCommand verificarEntidadCmd = new SqlCommand(verificarEntidadQuery, connection))
                    {
                        verificarEntidadCmd.Parameters.AddWithValue("@nombreEntidad", nombreEntidad);
                        int count = (int)verificarEntidadCmd.ExecuteScalar();
                        if (count > 0)
                        {
                            Console.WriteLine($"La entidad '{nombreEntidad}' ya existe en la base de datos.");
                            return;
                        }
                    }

                    // Consulta SQL para agregar una nueva tabla
                    string createTableQuery = $"CREATE TABLE {nombreEntidad} (ID INT PRIMARY KEY";
                    foreach (var atributo in atributos)
                    {
                        createTableQuery += $", {atributo} NVARCHAR(50)";
                    }
                    createTableQuery += ")";

                    using (SqlCommand command = new SqlCommand(createTableQuery, connection))
                    {
                        command.ExecuteNonQuery();
                        Console.WriteLine($"Se ha creado la nueva entidad '{nombreEntidad}' correctamente.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error al agregar la nueva entidad con atributos: " + ex.Message);
            }
        }

        static void GenerarInformePDF()
        {
            string rutaPDF = "C:/Users/Ivani/Desktop/Informe.pdf"; // Ruta para el archivo PDF
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    // Consulta SQL para obtener la lista de tablas en la base de datos
                    string query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = @Database ORDER BY TABLE_NAME";

                    List<string> entities = new List<string>();

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@Database", connection.Database);

                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            Console.WriteLine("Entidades disponibles:");
                            int entityId = 1;
                            while (reader.Read())
                            {
                                string tableName = reader.GetString(0);
                                entities.Add(tableName);
                                Console.WriteLine($"{entityId}. {tableName}");
                                entityId++;
                            }
                        }
                    }

                    // Permitir al usuario la selección de la entidad
                    Console.Write("Seleccione el número de la entidad que desea mostrar en el informe: ");
                    if (int.TryParse(Console.ReadLine(), out int selectedEntityId) && selectedEntityId > 0 && selectedEntityId <= entities.Count)
                    {
                        string selectedEntity = entities[selectedEntityId - 1];

                        // Consulta SQL para obtener los atributos de la entidad seleccionada
                        string attributeQuery = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG = @Database AND TABLE_NAME = @TableName";

                        List<string> attributes = new List<string>();

                        using (SqlCommand attributeCommand = new SqlCommand(attributeQuery, connection))
                        {
                            attributeCommand.Parameters.AddWithValue("@Database", connection.Database);
                            attributeCommand.Parameters.AddWithValue("@TableName", selectedEntity);

                            using (SqlDataReader attributeReader = attributeCommand.ExecuteReader())
                            {
                                // Mostrar los atributos disponibles para seleccionar
                                Console.WriteLine($"Atributos disponibles para la entidad '{selectedEntity}':");
                                while (attributeReader.Read())
                                {
                                    string attributeName = attributeReader.GetString(0);
                                    attributes.Add(attributeName);
                                    Console.WriteLine(attributeName);
                                }
                            }
                        }
                        Console.WriteLine("Ingrese los nombres de los atributos que desea mostrar (separados por coma):");
                        string selectedAttributesInput = Console.ReadLine();
                        string[] selectedAttributes = selectedAttributesInput.Split(',');

                        // Verificar que los atributos seleccionados son válidos
                        foreach (var attr in selectedAttributes)
                        {
                            if (!attributes.Contains(attr.Trim()))
                            {
                                Console.WriteLine($"El atributo '{attr.Trim()}' no es válido para la entidad '{selectedEntity}'.");
                                return;
                            }
                        }

                        // Crear la consulta SQL para obtener los datos de los atributos seleccionados
                        string columns = string.Join(", ", selectedAttributes);
                        string dataQuery = $"SELECT {columns} FROM {selectedEntity}";

                        List<Dictionary<string, object>> data = new List<Dictionary<string, object>>();

                        using (SqlCommand dataCommand = new SqlCommand(dataQuery, connection))
                        {
                            using (SqlDataReader dataReader = dataCommand.ExecuteReader())
                            {
                                // Leer los datos y almacenarlos en una lista de diccionarios
                                while (dataReader.Read())
                                {
                                    Dictionary<string, object> row = new Dictionary<string, object>();
                                    foreach (var attr in selectedAttributes)
                                    {
                                        row[attr.Trim()] = dataReader[attr.Trim()];
                                    }
                                    data.Add(row);
                                }
                            }
                        }

                        // Mostrar el informe en pantalla
                        Console.WriteLine($"\nInforme de la entidad: {selectedEntity}");
                        foreach (var row in data)
                        {
                            foreach (var kvp in row)
                            {
                                Console.WriteLine($"{kvp.Key}: {kvp.Value}");
                            }
                            Console.WriteLine();
                        }

                        // Preguntar al usuario si desea guardar el informe en PDF
                        Console.WriteLine("¿Desea guardar el informe en PDF? (s/n):");
                        string savePdfResponse = Console.ReadLine();

                        if (savePdfResponse.ToLower() == "s")
                        {
                            // Crear un nuevo documento PDF
                            using (PdfWriter writer = new PdfWriter(rutaPDF))
                            using (PdfDocument pdf = new PdfDocument(writer))
                            using (Document document = new Document(pdf))
                            {
                                document.Add(new Paragraph($"Entidad: {selectedEntity}"));

                                // Agregar los datos de los atributos seleccionados de la entidad al documento PDF
                                foreach (var row in data)
                                {
                                    foreach (var kvp in row)
                                    {
                                        document.Add(new Paragraph($"{kvp.Key}: {kvp.Value}"));
                                    }
                                    document.Add(new Paragraph("\n"));
                                }
                            }

                            Console.WriteLine("Informe PDF generado correctamente.");
                        }
                        else
                        {
                            Console.WriteLine("El informe no se guardó en PDF.");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Selección no válida. Saliendo del programa.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error al generar el informe: " + ex.Message);
            }
        }
        static void GenerarProcedimientosAlmacenados()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                SqlCommand command = new SqlCommand("SELECT name FROM sys.objects WHERE type = 'U'", connection);
                SqlDataReader reader = command.ExecuteReader();

                List<string> tableNames = new List<string>();

                while (reader.Read())
                {
                    tableNames.Add(reader["name"].ToString());
                }

                reader.Close();

                foreach (var tableName in tableNames)
                {
                    StringBuilder sb = new StringBuilder();

                    sb.AppendLine($"-- Procedimientos almacenados para la tabla {tableName}");
                    sb.AppendLine();

                    // Procedimiento almacenado para INSERT
                    sb.AppendLine($"CREATE PROCEDURE [dbo].[Insertar{tableName}]");
                    sb.AppendLine("AS");
                    sb.AppendLine("BEGIN");
                    sb.AppendLine($"    INSERT INTO {tableName} (");

                    SqlCommand columnCommand = new SqlCommand($"SELECT name FROM sys.columns WHERE object_id = OBJECT_ID('{tableName}')", connection);
                    SqlDataReader columnReader = columnCommand.ExecuteReader();
                    List<string> columnNames = new List<string>();
                    while (columnReader.Read())
                    {
                        columnNames.Add(columnReader["name"].ToString());
                    }
                    columnReader.Close();

                    sb.AppendLine(string.Join(", ", columnNames.Select(c => $"        {c}")));
                    sb.AppendLine("    )");
                    sb.AppendLine("    VALUES (");
                    sb.AppendLine(string.Join(", ", columnNames.Select(c => $"        @{c}")));
                    sb.AppendLine("    )");
                    sb.AppendLine("END");
                    sb.AppendLine("GO");
                    sb.AppendLine();

                    // Procedimiento almacenado para UPDATE
                    sb.AppendLine($"CREATE PROCEDURE [dbo].[Actualizar{tableName}]");
                    sb.AppendLine("AS");
                    sb.AppendLine("BEGIN");
                    sb.AppendLine($"    UPDATE {tableName}");
                    sb.AppendLine("    SET");

                    foreach (var columnName in columnNames)
                    {
                        sb.AppendLine($"        {columnName} = @{columnName},");
                    }

                    sb.Remove(sb.Length - 3, 1);
                    sb.AppendLine("    WHERE /Condición/");
                    sb.AppendLine("END");
                    sb.AppendLine("GO");
                    sb.AppendLine();

                    // Procedimiento almacenado para DELETE
                    sb.AppendLine($"CREATE PROCEDURE [dbo].[Eliminar{tableName}]");
                    sb.AppendLine("AS");
                    sb.AppendLine("BEGIN");
                    sb.AppendLine($"    DELETE FROM {tableName}");
                    sb.AppendLine("    WHERE /Condición/");
                    sb.AppendLine("END");
                    sb.AppendLine("GO");
                    sb.AppendLine();

                    // Procedimiento almacenado para SELECT
                    sb.AppendLine($"CREATE PROCEDURE [dbo].[Seleccionar{tableName}]");
                    sb.AppendLine("AS");
                    sb.AppendLine("BEGIN");
                    sb.AppendLine($"    SELECT * FROM {tableName}");
                    sb.AppendLine("END");
                    sb.AppendLine("GO");
                    sb.AppendLine();

                    Console.WriteLine(sb.ToString());
                }
            }


        }




    }
}
