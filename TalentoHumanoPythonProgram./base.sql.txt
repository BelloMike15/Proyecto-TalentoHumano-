-- Tablas principales
CREATE TABLE Empleado (
    EmpleadoID SERIAL PRIMARY KEY,
    Nombre VARCHAR(50),
    Apellido VARCHAR(50),
    FechaNacimiento DATE,
    Email VARCHAR(100),
    Telefono VARCHAR(20),
    CargoID INT,
    UbicacionID INT,
    AreaID INT,
    TipoDocID INT
);

CREATE TABLE Cargo (
    CargoID SERIAL PRIMARY KEY,
    NombreCargo VARCHAR(50),
    Descripcion TEXT
);

CREATE TABLE Departamento (
    DeptoID SERIAL PRIMARY KEY,
    NombreDepto VARCHAR(50),
    Descripcion TEXT
);

CREATE TABLE JornadaLaboral (
    JornadaID SERIAL PRIMARY KEY,
    Tipo VARCHAR(50),
    Horas INT
);

CREATE TABLE Area (
    AreaID SERIAL PRIMARY KEY,
    NombreArea VARCHAR(50),
    Descripcion TEXT
);

CREATE TABLE Ubicacion (
    UbicacionID SERIAL PRIMARY KEY,
    Edificio VARCHAR(50),
    Piso INT,
    Oficina VARCHAR(50)
);

CREATE TABLE TipoDocumento (
    TipoDocID SERIAL PRIMARY KEY,
    NombreTipo VARCHAR(50)
);

CREATE TABLE EvaluacionDesempeno (
    EvalDesempenoID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    Fecha DATE,
    Calificacion INT,
    Comentarios TEXT
);

CREATE TABLE HistorialLaboral (
    HistorialID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    FechaInicio DATE,
    FechaFin DATE,
    CargoID INT,
    DepartamentoID INT,
    Descripcion TEXT
);

CREATE TABLE Reclutamiento (
    ReclutamientoID SERIAL PRIMARY KEY,
    CargoID INT,
    FechaInicio DATE,
    FechaFin DATE,
    Estado VARCHAR(50),
    Descripcion TEXT
);

CREATE TABLE EventoEmpleado (
    EventoID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    Fecha DATE,
    TipoEvento VARCHAR(50),
    Descripcion TEXT
);

CREATE TABLE Licencias (
    LicenciaID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    FechaInicio DATE,
    FechaFin DATE,
    Motivo TEXT,
    Estado VARCHAR(50)
);

CREATE TABLE Sanciones (
    SancionID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    Fecha DATE,
    TipoSancion VARCHAR(50),
    Descripcion TEXT
);

-- Tablas auxiliares
CREATE TABLE Contrato (
    ContratoID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    FechaInicio DATE,
    FechaFin DATE,
    TipoContrato VARCHAR(50),
    TipoContratoID INT
);

CREATE TABLE FormacionAcademica (
    FormacionID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    Nivel VARCHAR(50),
    Institucion VARCHAR(100),
    Especialidad VARCHAR(100)
);

CREATE TABLE Salario (
    SalarioID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    Monto DECIMAL(10, 2),
    FechaInicio DATE,
    FechaFin DATE,
    FechaActualizacion DATE
);

CREATE TABLE Capacitacion (
    CapacitacionID SERIAL PRIMARY KEY,
    EmpleadoID INT,
    Nombre VARCHAR(100),
    Institucion VARCHAR(100),
    FechaInicio DATE,
    FechaFin DATE
);

CREATE TABLE Beneficios (
    BeneficioID SERIAL PRIMARY KEY,
    Nombre VARCHAR(100),
    Descripcion TEXT
);



-- Procedimiento para insertar en Empleado
CREATE OR REPLACE FUNCTION InsertEmpleado(
    p_Nombre VARCHAR,
    p_Apellido VARCHAR,
    p_FechaNacimiento DATE,
    p_Email VARCHAR,
    p_Telefono VARCHAR,
    p_CargoID INT,
    p_UbicacionID INT,
    p_AreaID INT,
    p_TipoDocID INT
) RETURNS VOID AS $$
BEGIN
    INSERT INTO Empleado (Nombre, Apellido, FechaNacimiento, Email, Telefono, CargoID, UbicacionID, AreaID, TipoDocID)
    VALUES (p_Nombre, p_Apellido, p_FechaNacimiento, p_Email, p_Telefono, p_CargoID, p_UbicacionID, p_AreaID, p_TipoDocID);
END;
$$ LANGUAGE plpgsql;

-- Procedimiento para seleccionar de Empleado
CREATE OR REPLACE FUNCTION SelectEmpleado() RETURNS TABLE (
    EmpleadoID INT,
    Nombre VARCHAR,
    Apellido VARCHAR,
    FechaNacimiento DATE,
    Email VARCHAR,
    Telefono VARCHAR,
    CargoID INT,
    UbicacionID INT,
    AreaID INT,
    TipoDocID INT
) AS $$
BEGIN
    RETURN QUERY SELECT * FROM Empleado;
END;
$$ LANGUAGE plpgsql;

-- Procedimiento para actualizar en Empleado
CREATE OR REPLACE FUNCTION UpdateEmpleado(
    p_EmpleadoID INT,
    p_Nombre VARCHAR,
    p_Apellido VARCHAR,
    p_FechaNacimiento DATE,
    p_Email VARCHAR,
    p_Telefono VARCHAR,
    p_CargoID INT,
    p_UbicacionID INT,
    p_AreaID INT,
    p_TipoDocID INT
) RETURNS VOID AS $$
BEGIN
    UPDATE Empleado
    SET Nombre = p_Nombre,
        Apellido = p_Apellido,
        FechaNacimiento = p_FechaNacimiento,
        Email = p_Email,
        Telefono = p_Telefono,
        CargoID = p_CargoID,
        UbicacionID = p_UbicacionID,
        AreaID = p_AreaID,
        TipoDocID = p_TipoDocID
    WHERE EmpleadoID = p_EmpleadoID;
END;
$$ LANGUAGE plpgsql;

-- Procedimiento para eliminar en Empleado
CREATE OR REPLACE FUNCTION DeleteEmpleado(
    p_EmpleadoID INT
) RETURNS VOID AS $$
BEGIN
    DELETE FROM Empleado WHERE EmpleadoID = p_EmpleadoID;
END;
$$ LANGUAGE plpgsql;



-- Insertar un empleado
SELECT InsertEmpleado('Juan', 'Perez', '1985-05-15', 'juan.perez@example.com', '555-1234', 1, 1, 1, 1);

-- Seleccionar todos los empleados
SELECT * FROM SelectEmpleado();

-- Actualizar un empleado
SELECT UpdateEmpleado(1, 'Juan', 'Perez', '1985-05-15', 'juan.perez@correo.com', '555-4321', 2, 2, 2, 2);

-- Seleccionar todos los empleados
SELECT * FROM SelectEmpleado();

-- Eliminar un empleado
SELECT DeleteEmpleado(1);

-- Seleccionar todos los empleados
SELECT * FROM SelectEmpleado();


-- Procedimiento para insertar en Cargo
CREATE OR REPLACE FUNCTION InsertCargo(
    p_NombreCargo VARCHAR,
    p_Descripcion TEXT
) RETURNS VOID AS $$
BEGIN
    INSERT INTO Cargo (NombreCargo, Descripcion)
    VALUES (p_NombreCargo, p_Descripcion);
END;
$$ LANGUAGE plpgsql;

-- Procedimiento para seleccionar de Cargo
CREATE OR REPLACE FUNCTION SelectCargo() RETURNS TABLE (
    CargoID INT,
    NombreCargo VARCHAR,
    Descripcion TEXT
) AS $$
BEGIN
    RETURN QUERY SELECT * FROM Cargo;
END;
$$ LANGUAGE plpgsql;

-- Procedimiento para actualizar en Cargo
CREATE OR REPLACE FUNCTION UpdateCargo(
    p_CargoID INT,
    p_NombreCargo VARCHAR,
    p_Descripcion TEXT
) RETURNS VOID AS $$
BEGIN
    UPDATE Cargo
    SET NombreCargo = p_NombreCargo,
        Descripcion = p_Descripcion
    WHERE CargoID = p_CargoID;
END;
$$ LANGUAGE plpgsql;

-- Procedimiento para eliminar en Cargo
CREATE OR REPLACE FUNCTION DeleteCargo(
    p_CargoID INT
) RETURNS VOID AS $$
BEGIN
    DELETE FROM Cargo WHERE CargoID = p_CargoID;
END;
$$ LANGUAGE plpgsql;



-- Insertar un cargo
SELECT InsertCargo('Gerente', 'Responsable de la gestión del departamento');

-- Seleccionar todos los cargos
SELECT * FROM SelectCargo();

-- Actualizar un cargo
SELECT UpdateCargo(1, 'Gerente General', 'Responsable de la gestión general del departamento');

-- Seleccionar todos los cargos
SELECT * FROM SelectCargo();

-- Eliminar un cargo
SELECT DeleteCargo(1);

-- Seleccionar todos los cargos
SELECT * FROM SelectCargo();



-- Función para crear un usuario
CREATE OR REPLACE FUNCTION crear_usuario(nombre_usuario VARCHAR, contraseña VARCHAR)
RETURNS VOID AS $$
BEGIN
    EXECUTE format('CREATE USER %I WITH PASSWORD %L', nombre_usuario, contraseña);
    EXECUTE format('GRANT CONNECT ON DATABASE TalentoHumano2 TO %I', nombre_usuario);
END;
$$ LANGUAGE plpgsql;

-- Función para modificar un usuario
CREATE OR REPLACE FUNCTION modificar_usuario(nombre_usuario_actual VARCHAR, nuevo_nombre_usuario VARCHAR)
RETURNS VOID AS $$
BEGIN
    EXECUTE format('ALTER USER %I RENAME TO %I', nombre_usuario_actual, nuevo_nombre_usuario);
END;
$$ LANGUAGE plpgsql;

-- Función para eliminar un usuario
CREATE OR REPLACE FUNCTION eliminar_usuario(nombre_usuario VARCHAR)
RETURNS VOID AS $$
BEGIN
    EXECUTE format('DROP USER %I CASCADE', nombre_usuario);
END;
$$ LANGUAGE plpgsql;